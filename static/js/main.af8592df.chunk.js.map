{"version":3,"sources":["axios.js","Rows.js","requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Rows","props","useState","movies","setmovies","useEffect","a","get","fetchurl","request","data","results","fetchdata","className","title","map","isLargeRow","src","poster_path","backdrop_path","alt","name","id","API_KEY","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","abc","n","setmoview","requests","Math","floor","random","length","console","log","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","setshow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.af8592df.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport instance from \"./axios\";\r\nimport \"./row.css\";\r\n\r\nfunction Rows(props) {\r\n  const [movies, setmovies] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchdata() {\r\n      const request = await instance.get(props.fetchurl);\r\n      setmovies(request.data.results);\r\n\r\n      return request;\r\n    }\r\n\r\n    fetchdata();\r\n  }, [props.fetchurl]);\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{props.title}</h2>\r\n      <div className=\"row_posters\">\r\n        {movies.map((movies) => (\r\n          <img\r\n            className={`row_poster ${props.isLargeRow && \"row_posterLarge\"}`}\r\n            key={movies.id}\r\n            src={`https://image.tmdb.org/t/p/original/${\r\n              props.isLargeRow ? movies.poster_path : movies.backdrop_path\r\n            }`}\r\n            alt={movies.name}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Rows;\r\n","const API_KEY = 'dffa12782caed4c0a4d1304736d39f8f'\r\n\r\nconst request = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US `,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US` ,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`\r\n}\r\n\r\nexport default request ","import React, { useEffect, useState } from \"react\";\r\nimport instance from \"./axios\";\r\nimport request from \"./requests\";\r\nimport \"./banner.css\";\r\n\r\nfunction Banner() {\r\n  const [movies, setmoview] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchdata() {\r\n      const requests = await instance.get(request.fetchNetflixOriginals);\r\n      setmoview(\r\n        requests.data.results[\r\n          Math.floor(Math.random() * requests.data.results.length - 1)\r\n        ]\r\n      );\r\n\r\n      return request;\r\n    }\r\n\r\n    fetchdata();\r\n  }, []);\r\n\r\n  console.log(movies);\r\n\r\n  function truncate(abc, n) {\r\n    return abc?.length > n ? abc.substr(0, n - 1) + \"...\" : abc;\r\n  }\r\n  return (\r\n    <header\r\n      className=\"banner\"\r\n      style={{\r\n        backgroundSize: \"cover \",\r\n        backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movies.backdrop_path}\")`,\r\n        backgroundPosition: \"center center\",\r\n      }}\r\n    >\r\n      <div className=\"banner_contents\">\r\n        <h1 className=\"banner_title\">\r\n          {movies.title || movies.name || movies.original_name}\r\n        </h1>\r\n        <div className=\"banner_buttons\">\r\n          <button className=\"banner_button\">Play</button>\r\n          <button className=\"banner_button\">Mylist</button>\r\n        </div>\r\n        <h1 className=\"banner_description\">\r\n          {truncate(movies?.overview, 150)}\r\n        </h1>\r\n      </div>\r\n      <div className=\"fadebottom\" />\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./nav.css\";\r\nfunction Nav() {\r\n  const [show, setshow] = useState(false);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", () => {\r\n      if (window.scrollY > 100) {\r\n        setshow(true);\r\n      } else {\r\n        setshow(false);\r\n      }\r\n    });\r\n    return () => {\r\n      window.removeEventListener(\"scroll\");\r\n    };\r\n  }, []);\r\n  return (\r\n    <div className={`Nav ${show && \"navblack\"}`}>\r\n      <img\r\n        className=\"n_logo\"\r\n        src=\"https://fontmeme.com/temporary/5e532fe7df89dcc0c65d0c16b0c16ad0.png\"\r\n        alt=\"Netflix Logo\"\r\n      />\r\n      <img\r\n        className=\"n_avatar \"\r\n        src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\"\r\n        alt=\"Netflix avatar\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Rows from \"./Rows.js\";\nimport request from \"./requests\";\nimport Banner from \"./Banner\";\nimport Nav from \"./Nav\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n      <Banner />\n      <Rows\n        title=\"NETFLIX ORIGINALS\"\n        fetchurl={request.fetchNetflixOriginals}\n        isLargeRow={true}\n      />\n      <Rows title=\"Trending Now\" fetchurl={request.fetchTrending} />\n      <Rows title=\"Top Rated\" fetchurl={request.fetchTopRated} />\n      <Rows title=\"Action Movies\" fetchurl={request.fetchActionMovies} />\n      <Rows title=\"Comedy Movies\" fetchurl={request.fetchComedyMovies} />\n      <Rows title=\"Romance Movies\" fetchurl={request.fetchRomanceMovies} />\n      <Rows title=\"Horror Movies\" fetchurl={request.fetchHorrorMovies} />\n      <Rows title=\"Documentaries\" fetchurl={request.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}